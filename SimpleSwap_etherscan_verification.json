{
  "language": "Solidity",
  "sources": {
    "SimpleSwap.sol": {
      "content": "\r\n\/\/ File: @openzeppelin\/contracts\/token\/ERC20\/IERC20.sol\r\n\r\n\r\n\/\/ OpenZeppelin Contracts (last updated v5.1.0) (token\/ERC20\/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\/**\r\n * @dev Interface of the ERC-20 standard as defined in the ERC.\r\n *\/\r\ninterface IERC20 {\r\n    \/**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     *\/\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \/**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     *\/\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    \/**\r\n     * @dev Returns the value of tokens in existence.\r\n     *\/\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \/**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     *\/\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \/**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\/\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    \/**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     *\/\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \/**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https:\/\/github.com\/ethereum\/EIPs\/issues\/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\/\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    \/**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\/\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\/\/ File: @openzeppelin\/contracts\/token\/ERC20\/extensions\/IERC20Metadata.sol\r\n\r\n\r\n\/\/ OpenZeppelin Contracts (last updated v5.1.0) (token\/ERC20\/extensions\/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\/**\r\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\r\n *\/\r\ninterface IERC20Metadata is IERC20 {\r\n    \/**\r\n     * @dev Returns the name of the token.\r\n     *\/\r\n    function name() external view returns (string memory);\r\n\r\n    \/**\r\n     * @dev Returns the symbol of the token.\r\n     *\/\r\n    function symbol() external view returns (string memory);\r\n\r\n    \/**\r\n     * @dev Returns the decimals places of the token.\r\n     *\/\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\/\/ File: @openzeppelin\/contracts\/utils\/Context.sol\r\n\r\n\r\n\/\/ OpenZeppelin Contracts (last updated v5.0.1) (utils\/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n *\/\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n\/\/ File: @openzeppelin\/contracts\/interfaces\/draft-IERC6093.sol\r\n\r\n\r\n\/\/ OpenZeppelin Contracts (last updated v5.1.0) (interfaces\/draft-IERC6093.sol)\r\npragma solidity ^0.8.20;\r\n\r\n\/**\r\n * @dev Standard ERC-20 Errors\r\n * Interface of the https:\/\/eips.ethereum.org\/EIPS\/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\r\n *\/\r\ninterface IERC20Errors {\r\n    \/**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     *\/\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     *\/\r\n    error ERC20InvalidSender(address sender);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     *\/\r\n    error ERC20InvalidReceiver(address receiver);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     *\/\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     *\/\r\n    error ERC20InvalidApprover(address approver);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     *\/\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\n\/**\r\n * @dev Standard ERC-721 Errors\r\n * Interface of the https:\/\/eips.ethereum.org\/EIPS\/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\r\n *\/\r\ninterface IERC721Errors {\r\n    \/**\r\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\r\n     * Used in balance queries.\r\n     * @param owner Address of the current owner of a token.\r\n     *\/\r\n    error ERC721InvalidOwner(address owner);\r\n\r\n    \/**\r\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\r\n     * @param tokenId Identifier number of a token.\r\n     *\/\r\n    error ERC721NonexistentToken(uint256 tokenId);\r\n\r\n    \/**\r\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param tokenId Identifier number of a token.\r\n     * @param owner Address of the current owner of a token.\r\n     *\/\r\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     *\/\r\n    error ERC721InvalidSender(address sender);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     *\/\r\n    error ERC721InvalidReceiver(address receiver);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param tokenId Identifier number of a token.\r\n     *\/\r\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     *\/\r\n    error ERC721InvalidApprover(address approver);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     *\/\r\n    error ERC721InvalidOperator(address operator);\r\n}\r\n\r\n\/**\r\n * @dev Standard ERC-1155 Errors\r\n * Interface of the https:\/\/eips.ethereum.org\/EIPS\/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\r\n *\/\r\ninterface IERC1155Errors {\r\n    \/**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     * @param tokenId Identifier number of a token.\r\n     *\/\r\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     *\/\r\n    error ERC1155InvalidSender(address sender);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     *\/\r\n    error ERC1155InvalidReceiver(address receiver);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param owner Address of the current owner of a token.\r\n     *\/\r\n    error ERC1155MissingApprovalForAll(address operator, address owner);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     *\/\r\n    error ERC1155InvalidApprover(address approver);\r\n\r\n    \/**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     *\/\r\n    error ERC1155InvalidOperator(address operator);\r\n\r\n    \/**\r\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\r\n     * Used in batch transfers.\r\n     * @param idsLength Length of the array of token identifiers\r\n     * @param valuesLength Length of the array of token amounts\r\n     *\/\r\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n}\r\n\r\n\/\/ File: @openzeppelin\/contracts\/token\/ERC20\/ERC20.sol\r\n\r\n\r\n\/\/ OpenZeppelin Contracts (last updated v5.3.0) (token\/ERC20\/ERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n\/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https:\/\/forum.openzeppelin.com\/t\/how-to-implement-erc20-supply-mechanisms\/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC-20\r\n * applications.\r\n *\/\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address account => uint256) private _balances;\r\n\r\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    \/**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * Both values are immutable: they can only be set once during construction.\r\n     *\/\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    \/**\r\n     * @dev Returns the name of the token.\r\n     *\/\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    \/**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     *\/\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    \/**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 \/ 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     *\/\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    \/**\r\n     * @dev See {IERC20-totalSupply}.\r\n     *\/\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    \/**\r\n     * @dev See {IERC20-balanceOf}.\r\n     *\/\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    \/**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `value`.\r\n     *\/\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @dev See {IERC20-allowance}.\r\n     *\/\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    \/**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     *\/\r\n    function approve(address spender, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\r\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `value`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `value`.\r\n     *\/\r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     *\/\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n\r\n    \/**\r\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\r\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\r\n     * this function.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\/\r\n    function _update(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            \/\/ Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance < value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n                \/\/ Overflow not possible: value <= fromBalance <= totalSupply.\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                \/\/ Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                \/\/ Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    \/**\r\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\r\n     * Relies on the `_update` mechanism\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     *\/\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n\r\n    \/**\r\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\r\n     * Relies on the `_update` mechanism.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead\r\n     *\/\r\n    function _burn(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), value);\r\n    }\r\n\r\n    \/**\r\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     *\r\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n     *\/\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    \/**\r\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\r\n     *\r\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\r\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\r\n     * `Approval` event during `transferFrom` operations.\r\n     *\r\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\r\n     * true using the following override:\r\n     *\r\n     * ```solidity\r\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\r\n     *     super._approve(owner, spender, value, true);\r\n     * }\r\n     * ```\r\n     *\r\n     * Requirements are the same as {_approve}.\r\n     *\/\r\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n\r\n    \/**\r\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\r\n     *\r\n     * Does not update the allowance value in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Does not emit an {Approval} event.\r\n     *\/\r\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance < type(uint256).max) {\r\n            if (currentAllowance < value) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\/\/ File: contracts\/interfaces\/ISimpleSwap.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\/\/\/ @title Interface for SimpleSwap\r\ninterface ISimpleSwap {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function getPrice(address tokenA, address tokenB) external view returns (uint256 price);\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256);\r\n}\r\n\/\/ File: contracts\/SimpleSwap.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\/**\r\n * @title SimpleSwap\r\n * @notice A minimal decentralized exchange contract supporting ERC20 token swaps and liquidity provision.\r\n *\/\r\ncontract SimpleSwap is ERC20, ISimpleSwap {\r\n    \/\/\/ @notice Maps token pairs to their respective reserves (tokenA perspective)\r\n    mapping(address => mapping(address => uint)) public reservesA;\r\n    \/\/\/ @notice Maps token pairs to their respective reserves (tokenB perspective)\r\n    mapping(address => mapping(address => uint)) public reservesB;\r\n    \/\/\/ @notice Tracks total liquidity provided for a token pair\r\n    mapping(address => mapping(address => uint)) public totalLiquidity;\r\n    \/\/\/ @notice Tracks user-specific liquidity provision for a token pair\r\n    mapping(address => mapping(address => mapping(address => uint))) public userLiquidity;\r\n\r\n    \/\/\/ @notice Emitted when liquidity is added to the pool\r\n    event LiquidityAdded(address indexed provider, address indexed tokenA, address indexed tokenB, uint amountA, uint amountB, uint liquidity);\r\n    \/\/\/ @notice Emitted when liquidity is removed from the pool\r\n    event LiquidityRemoved(address indexed provider, address indexed tokenA, address indexed tokenB, uint amountA, uint amountB, uint liquidity);\r\n    \/\/\/ @notice Emitted when a token swap is successfully executed\r\n    event SwapExecuted(address indexed user, address tokenIn, address tokenOut, uint amountIn, uint amountOut);\r\n\r\n    \/\/\/ @notice Ensures the transaction deadline has not passed\r\n    modifier ensure(uint deadline) {\r\n        require(block.timestamp <= deadline, \"SimpleSwap: EXPIRED\");\r\n        _;\r\n    }\r\n\r\n    \/\/\/ @notice Ensures the token pair is valid (non-identical and non-zero addresses)\r\n    modifier validPair(address tokenA, address tokenB) {\r\n        require(tokenA != tokenB, \"SimpleSwap: IDENTICAL_ADDRESSES\");\r\n        require(tokenA != address(0) && tokenB != address(0), \"SimpleSwap: ZERO_ADDRESS\");\r\n        _;\r\n    }\r\n\r\n    \/\/\/ @notice Initializes the contract with an LP token\r\n    constructor() ERC20(\"Liquidity Provider Token\", \"LP\") {}\r\n\r\n    \/**\r\n     * @notice Adds liquidity to the pool and mints LP tokens\r\n     * @param tokenA Address of token A\r\n     * @param tokenB Address of token B\r\n     * @param amountADesired Desired amount of token A to add\r\n     * @param amountBDesired Desired amount of token B to add\r\n     * @param amountAMin Minimum amount of token A\r\n     * @param amountBMin Minimum amount of token B\r\n     * @param to Address to mint LP tokens to\r\n     * @param deadline Timestamp after which transaction reverts\r\n     * @return amountA Actual amount of token A added\r\n     * @return amountB Actual amount of token B added\r\n     * @return liquidity Amount of LP tokens minted\r\n     *\/\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external ensure(deadline) validPair(tokenA, tokenB) returns (uint amountA, uint amountB, uint liquidity) {\r\n        \/\/ Retrieve reserves\r\n        uint reserveA = reservesA[tokenA][tokenB];\r\n        uint reserveB = reservesB[tokenA][tokenB];\r\n\r\n        \/\/ If no liquidity exists yet, use exact amounts\r\n        if (reserveA == 0 && reserveB == 0) {\r\n            amountA = amountADesired;\r\n            amountB = amountBDesired;\r\n        } else {\r\n            \/\/ Otherwise, calculate optimal counterpart to maintain ratio\r\n            uint amountBOptimal = (amountADesired * reserveB) \/ reserveA;\r\n            if (amountBOptimal <= amountBDesired && amountBOptimal >= amountBMin) {\r\n                amountA = amountADesired;\r\n                amountB = amountBOptimal;\r\n            } else {\r\n                uint amountAOptimal = (amountBDesired * reserveA) \/ reserveB;\r\n                require(amountAOptimal <= amountADesired && amountAOptimal >= amountAMin, \"SimpleSwap: INSUFFICIENT_A_OR_B\");\r\n                amountA = amountAOptimal;\r\n                amountB = amountBDesired;\r\n            }\r\n        }\r\n\r\n        \/\/ Transfer tokens into contract\r\n        require(ERC20(tokenA).transferFrom(msg.sender, address(this), amountA), \"SimpleSwap: TRANSFER_A_FAILED\");\r\n        require(ERC20(tokenB).transferFrom(msg.sender, address(this), amountB), \"SimpleSwap: TRANSFER_B_FAILED\");\r\n\r\n        \/\/ Update reserves\r\n        reservesA[tokenA][tokenB] += amountA;\r\n        reservesB[tokenA][tokenB] += amountB;\r\n\r\n        \/\/ Mint liquidity tokens based on new deposits\r\n        if (totalLiquidity[tokenA][tokenB] == 0) {\r\n            liquidity = sqrt(amountA * amountB);\r\n        } else {\r\n            liquidity = min((amountA * totalLiquidity[tokenA][tokenB]) \/ reserveA, (amountB * totalLiquidity[tokenA][tokenB]) \/ reserveB);\r\n        }\r\n\r\n        require(liquidity > 0, \"SimpleSwap: INSUFFICIENT_LIQUIDITY\");\r\n\r\n        \/\/ Update LP tracking\r\n        totalLiquidity[tokenA][tokenB] += liquidity;\r\n        userLiquidity[to][tokenA][tokenB] += liquidity;\r\n\r\n        _mint(to, liquidity);\r\n\r\n        emit LiquidityAdded(msg.sender, tokenA, tokenB, amountA, amountB, liquidity);\r\n        return (amountA, amountB, liquidity);\r\n    }\r\n\r\n    \/**\r\n     * @notice Removes liquidity from the pool and burns LP tokens\r\n     * @param tokenA Address of token A\r\n     * @param tokenB Address of token B\r\n     * @param liquidity Amount of LP tokens to burn\r\n     * @param amountAMin Minimum amount of token A to receive\r\n     * @param amountBMin Minimum amount of token B to receive\r\n     * @param to Address to receive tokens\r\n     * @param deadline Timestamp after which transaction reverts\r\n     * @return amountA Amount of token A returned\r\n     * @return amountB Amount of token B returned\r\n     *\/\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external ensure(deadline) validPair(tokenA, tokenB) returns (uint amountA, uint amountB) {\r\n        \/\/ Load state\r\n        uint reserveA = reservesA[tokenA][tokenB];\r\n        uint reserveB = reservesB[tokenA][tokenB];\r\n        uint totalLiquidity_ = totalLiquidity[tokenA][tokenB];\r\n\r\n        require(liquidity > 0, \"SimpleSwap: INSUFFICIENT_LIQUIDITY_BURNED\");\r\n        require(userLiquidity[msg.sender][tokenA][tokenB] >= liquidity, \"SimpleSwap: NOT_ENOUGH_USER_LIQUIDITY\");\r\n\r\n        \/\/ Compute amounts based on LP share\r\n        amountA = (liquidity * reserveA) \/ totalLiquidity_;\r\n        amountB = (liquidity * reserveB) \/ totalLiquidity_;\r\n\r\n        require(amountA >= amountAMin && amountB >= amountBMin, \"SimpleSwap: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n\r\n        \/\/ Update reserves and balances\r\n        reservesA[tokenA][tokenB] -= amountA;\r\n        reservesB[tokenA][tokenB] -= amountB;\r\n\r\n        totalLiquidity[tokenA][tokenB] -= liquidity;\r\n        userLiquidity[msg.sender][tokenA][tokenB] -= liquidity;\r\n\r\n        _burn(msg.sender, liquidity);\r\n\r\n        \/\/ Send tokens back to user\r\n        require(ERC20(tokenA).transfer(to, amountA), \"SimpleSwap: TRANSFER_A_FAILED\");\r\n        require(ERC20(tokenB).transfer(to, amountB), \"SimpleSwap: TRANSFER_B_FAILED\");\r\n\r\n        emit LiquidityRemoved(msg.sender, tokenA, tokenB, amountA, amountB, liquidity);\r\n        return (amountA, amountB);\r\n    }\r\n\r\n    \/**\r\n     * @notice Swaps exact tokens for tokens via a direct path\r\n     * @param amountIn Amount of input tokens\r\n     * @param amountOutMin Minimum output tokens to receive\r\n     * @param path Array with [tokenIn, tokenOut]\r\n     * @param to Recipient address\r\n     * @param deadline Timestamp after which transaction reverts\r\n     *\/\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external ensure(deadline) {\r\n        require(path.length == 2, \"SimpleSwap: INVALID_PATH\");\r\n        address tokenIn = path[0];\r\n        address tokenOut = path[1];\r\n\r\n        \/\/ Retrieve reserves\r\n        uint reserveIn = reservesA[tokenIn][tokenOut];\r\n        uint reserveOut = reservesB[tokenIn][tokenOut];\r\n        require(reserveIn > 0 && reserveOut > 0, \"SimpleSwap: INSUFFICIENT_LIQUIDITY\");\r\n\r\n        \/\/ Transfer input tokens\r\n        require(ERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn), \"SimpleSwap: TRANSFER_FAILED\");\r\n\r\n        \/\/ Calculate output\r\n        uint amountOut = getAmountOutInternal(amountIn, reserveIn, reserveOut);\r\n        require(amountOut >= amountOutMin, \"SimpleSwap: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n\r\n        \/\/ Update reserves\r\n        reservesA[tokenIn][tokenOut] += amountIn;\r\n        reservesB[tokenIn][tokenOut] -= amountOut;\r\n\r\n        \/\/ Send tokens to user\r\n        require(ERC20(tokenOut).transfer(to, amountOut), \"SimpleSwap: OUTPUT_TRANSFER_FAILED\");\r\n\r\n        emit SwapExecuted(msg.sender, tokenIn, tokenOut, amountIn, amountOut);\r\n    }\r\n\r\n    \/**\r\n     * @notice Returns price ratio (tokenB\/tokenA)\r\n     * @param tokenA Token A address\r\n     * @param tokenB Token B address\r\n     * @return price Quoted price as tokenB\/tokenA with 18 decimals\r\n     *\/\r\n    function getPrice(address tokenA, address tokenB) external view returns (uint price){\r\n        uint reserveA = reservesA[tokenA][tokenB];\r\n        uint reserveB = reservesB[tokenA][tokenB];\r\n        require(reserveA > 0 && reserveB > 0, \"SimpleSwap: NO_LIQUIDITY\");\r\n        price = (reserveB * 1e18) \/ reserveA;\r\n    }\r\n\r\n    \/**\r\n     * @notice Returns estimated amountOut for a given input and reserves\r\n     * @param amountIn Amount of input tokens\r\n     * @param reserveIn Reserve of input token\r\n     * @param reserveOut Reserve of output token\r\n     * @return amountOut Calculated amount out\r\n     *\/\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut) {\r\n        amountOut = getAmountOutInternal(amountIn, reserveIn, reserveOut);\r\n    }\r\n\r\n    \/**\r\n     * @dev Pure internal calculation of output amount\r\n     * @param amountIn Input token amount\r\n     * @param reserveIn Reserve of token being input\r\n     * @param reserveOut Reserve of token being output\r\n     * @return amountOut Result of swap without fee\r\n     *\/\r\n    function getAmountOutInternal(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, \"SimpleSwap: INSUFFICIENT_INPUT_AMOUNT\");\r\n        require(reserveIn > 0 && reserveOut > 0, \"SimpleSwap: INSUFFICIENT_LIQUIDITY\");\r\n        amountOut = (amountIn * reserveOut) \/ (reserveIn + amountIn);\r\n    }\r\n\r\n\r\n    \/\/\/ @dev Helper: returns the smaller of two uints\r\n    function min(uint a, uint b) private pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n    \r\n    \/\/\/ @dev Helper: integer square root (for initial LP minting)\r\n    function sqrt(uint y) private pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y \/ 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y \/ x + x) \/ 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "prague",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode"
        ]
      }
    }
  }
}