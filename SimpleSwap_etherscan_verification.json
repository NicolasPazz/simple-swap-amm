{
  "language": "Solidity",
  "sources": {
    "SimpleSwap.sol": {
      "content": "\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\n\n\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// File: @openzeppelin/contracts/interfaces/draft-IERC6093.sol\n\n\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\n\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n\n// File: contracts/SimpleSwap.sol\n\n\npragma solidity ^0.8.20;\n\n\n/**\n * @title SimpleSwap\n * @notice A minimal decentralized exchange contract supporting ERC20 token swaps and liquidity provision.\n */\ncontract SimpleSwap is ERC20 {\n    /// @notice Maps token pairs to their respective reserves (tokenA perspective)\n    mapping(address => mapping(address => uint)) public reservesA;\n    /// @notice Maps token pairs to their respective reserves (tokenB perspective)\n    mapping(address => mapping(address => uint)) public reservesB;\n    /// @notice Tracks total liquidity provided for a token pair\n    mapping(address => mapping(address => uint)) public totalLiquidity;\n    /// @notice Tracks user-specific liquidity provision for a token pair\n    mapping(address => mapping(address => mapping(address => uint))) public userLiquidity;\n\n    /// @notice Emitted when liquidity is added to the pool\n    event LiquidityAdded(address indexed provider, address indexed tokenA, address indexed tokenB, uint amountA, uint amountB, uint liquidity);\n    /// @notice Emitted when liquidity is removed from the pool\n    event LiquidityRemoved(address indexed provider, address indexed tokenA, address indexed tokenB, uint amountA, uint amountB, uint liquidity);\n    /// @notice Emitted when a token swap is successfully executed\n    event SwapExecuted(address indexed user, address tokenIn, address tokenOut, uint amountIn, uint amountOut);\n\n    /// @notice Ensures the transaction deadline has not passed\n    modifier ensure(uint deadline) {\n        require(block.timestamp <= deadline, \"SimpleSwap: EXPIRED\");\n        _;\n    }\n\n    /// @notice Ensures the token pair is valid (non-identical and non-zero addresses)\n    modifier validPair(address tokenA, address tokenB) {\n        require(tokenA != tokenB, \"SimpleSwap: IDENTICAL_ADDRESSES\");\n        require(tokenA != address(0) && tokenB != address(0), \"SimpleSwap: ZERO_ADDRESS\");\n        _;\n    }\n\n    /// @notice Initializes the contract with an LP token\n    constructor() ERC20(\"Liquidity Provider Token\", \"LP\") {}\n\n    /**\n     * @notice Adds liquidity to the pool and mints LP tokens\n     * @param tokenA Address of token A\n     * @param tokenB Address of token B\n     * @param amountADesired Desired amount of token A to add\n     * @param amountBDesired Desired amount of token B to add\n     * @param amountAMin Minimum amount of token A\n     * @param amountBMin Minimum amount of token B\n     * @param to Address to mint LP tokens to\n     * @param deadline Timestamp after which transaction reverts\n     * @return amountA Actual amount of token A added\n     * @return amountB Actual amount of token B added\n     * @return liquidity Amount of LP tokens minted\n     */\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external ensure(deadline) validPair(tokenA, tokenB) returns (uint amountA, uint amountB, uint liquidity) {\n        // Retrieve reserves\n        uint reserveA = reservesA[tokenA][tokenB];\n        uint reserveB = reservesB[tokenA][tokenB];\n\n        // If no liquidity exists yet, use exact amounts\n        if (reserveA == 0 && reserveB == 0) {\n            amountA = amountADesired;\n            amountB = amountBDesired;\n        } else {\n            // Otherwise, calculate optimal counterpart to maintain ratio\n            uint amountBOptimal = (amountADesired * reserveB) / reserveA;\n            if (amountBOptimal <= amountBDesired && amountBOptimal >= amountBMin) {\n                amountA = amountADesired;\n                amountB = amountBOptimal;\n            } else {\n                uint amountAOptimal = (amountBDesired * reserveA) / reserveB;\n                require(amountAOptimal <= amountADesired && amountAOptimal >= amountAMin, \"SimpleSwap: INSUFFICIENT_A_OR_B\");\n                amountA = amountAOptimal;\n                amountB = amountBDesired;\n            }\n        }\n\n        // Transfer tokens into contract\n        require(ERC20(tokenA).transferFrom(msg.sender, address(this), amountA), \"SimpleSwap: TRANSFER_A_FAILED\");\n        require(ERC20(tokenB).transferFrom(msg.sender, address(this), amountB), \"SimpleSwap: TRANSFER_B_FAILED\");\n\n        // Update reserves\n        reservesA[tokenA][tokenB] += amountA;\n        reservesB[tokenA][tokenB] += amountB;\n\n        // Mint liquidity tokens based on new deposits\n        if (totalLiquidity[tokenA][tokenB] == 0) {\n            liquidity = sqrt(amountA * amountB);\n        } else {\n            liquidity = min((amountA * totalLiquidity[tokenA][tokenB]) / reserveA, (amountB * totalLiquidity[tokenA][tokenB]) / reserveB);\n        }\n\n        require(liquidity > 0, \"SimpleSwap: INSUFFICIENT_LIQUIDITY\");\n\n        // Update LP tracking\n        totalLiquidity[tokenA][tokenB] += liquidity;\n        userLiquidity[to][tokenA][tokenB] += liquidity;\n\n        _mint(to, liquidity);\n\n        emit LiquidityAdded(msg.sender, tokenA, tokenB, amountA, amountB, liquidity);\n        return (amountA, amountB, liquidity);\n    }\n\n    /**\n     * @notice Removes liquidity from the pool and burns LP tokens\n     * @param tokenA Address of token A\n     * @param tokenB Address of token B\n     * @param liquidity Amount of LP tokens to burn\n     * @param amountAMin Minimum amount of token A to receive\n     * @param amountBMin Minimum amount of token B to receive\n     * @param to Address to receive tokens\n     * @param deadline Timestamp after which transaction reverts\n     * @return amountA Amount of token A returned\n     * @return amountB Amount of token B returned\n     */\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external ensure(deadline) validPair(tokenA, tokenB) returns (uint amountA, uint amountB) {\n        // Load state\n        uint reserveA = reservesA[tokenA][tokenB];\n        uint reserveB = reservesB[tokenA][tokenB];\n        uint totalLiquidity_ = totalLiquidity[tokenA][tokenB];\n\n        require(liquidity > 0, \"SimpleSwap: INSUFFICIENT_LIQUIDITY_BURNED\");\n        require(userLiquidity[msg.sender][tokenA][tokenB] >= liquidity, \"SimpleSwap: NOT_ENOUGH_USER_LIQUIDITY\");\n\n        // Compute amounts based on LP share\n        amountA = (liquidity * reserveA) / totalLiquidity_;\n        amountB = (liquidity * reserveB) / totalLiquidity_;\n\n        require(amountA >= amountAMin && amountB >= amountBMin, \"SimpleSwap: INSUFFICIENT_OUTPUT_AMOUNT\");\n\n        // Update reserves and balances\n        reservesA[tokenA][tokenB] -= amountA;\n        reservesB[tokenA][tokenB] -= amountB;\n\n        totalLiquidity[tokenA][tokenB] -= liquidity;\n        userLiquidity[msg.sender][tokenA][tokenB] -= liquidity;\n\n        _burn(msg.sender, liquidity);\n\n        // Send tokens back to user\n        require(ERC20(tokenA).transfer(to, amountA), \"SimpleSwap: TRANSFER_A_FAILED\");\n        require(ERC20(tokenB).transfer(to, amountB), \"SimpleSwap: TRANSFER_B_FAILED\");\n\n        emit LiquidityRemoved(msg.sender, tokenA, tokenB, amountA, amountB, liquidity);\n        return (amountA, amountB);\n    }\n\n    /**\n     * @notice Swaps exact tokens for tokens via a direct path\n     * @param amountIn Amount of input tokens\n     * @param amountOutMin Minimum output tokens to receive\n     * @param path Array with [tokenIn, tokenOut]\n     * @param to Recipient address\n     * @param deadline Timestamp after which transaction reverts\n     * @return swappedAmounts Array with [amountIn, amountOut]\n     */\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external ensure(deadline) returns (uint[] memory swappedAmounts) {\n        require(path.length == 2, \"SimpleSwap: INVALID_PATH\");\n        address tokenIn = path[0];\n        address tokenOut = path[1];\n\n        // Retrieve reserves\n        uint reserveIn = reservesA[tokenIn][tokenOut];\n        uint reserveOut = reservesB[tokenIn][tokenOut];\n        require(reserveIn > 0 && reserveOut > 0, \"SimpleSwap: INSUFFICIENT_LIQUIDITY\");\n\n        // Transfer input tokens\n        require(ERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn), \"SimpleSwap: TRANSFER_FAILED\");\n\n        // Calculate output\n        uint amountOut = getAmountOutInternal(amountIn, reserveIn, reserveOut);\n        require(amountOut >= amountOutMin, \"SimpleSwap: INSUFFICIENT_OUTPUT_AMOUNT\");\n\n        // Update reserves\n        reservesA[tokenIn][tokenOut] += amountIn;\n        reservesB[tokenIn][tokenOut] -= amountOut;\n\n        // Send tokens to user\n        require(ERC20(tokenOut).transfer(to, amountOut), \"SimpleSwap: OUTPUT_TRANSFER_FAILED\");\n\n        // Return result\n        swappedAmounts = new uint[](2);\n        swappedAmounts[0] = amountIn;\n        swappedAmounts[1] = amountOut;\n\n        emit SwapExecuted(msg.sender, tokenIn, tokenOut, amountIn, amountOut);\n        return swappedAmounts;\n    }\n\n    /**\n     * @notice Returns price ratio (tokenB/tokenA)\n     * @param tokenA Token A address\n     * @param tokenB Token B address\n     * @return price Quoted price as tokenB/tokenA with 18 decimals\n     */\n    function getPrice(address tokenA, address tokenB) external view returns (uint price){\n        uint reserveA = reservesA[tokenA][tokenB];\n        uint reserveB = reservesB[tokenA][tokenB];\n        require(reserveA > 0 && reserveB > 0, \"SimpleSwap: NO_LIQUIDITY\");\n        price = (reserveB * 1e18) / reserveA;\n    }\n\n    /**\n     * @notice Returns estimated amountOut for a given input and reserves\n     * @param amountIn Amount of input tokens\n     * @param reserveIn Reserve of input token\n     * @param reserveOut Reserve of output token\n     * @return amountOut Calculated amount out\n     */\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut) {\n        amountOut = getAmountOutInternal(amountIn, reserveIn, reserveOut);\n    }\n\n    /**\n     * @dev Pure internal calculation of output amount\n     * @param amountIn Input token amount\n     * @param reserveIn Reserve of token being input\n     * @param reserveOut Reserve of token being output\n     * @return amountOut Result of swap without fee\n     */\n    function getAmountOutInternal(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, \"SimpleSwap: INSUFFICIENT_INPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"SimpleSwap: INSUFFICIENT_LIQUIDITY\");\n        amountOut = (amountIn * reserveOut) / (reserveIn + amountIn);\n    }\n\n\n    /// @dev Helper: returns the smaller of two uints\n    function min(uint a, uint b) private pure returns (uint) {\n        return a < b ? a : b;\n    }\n    \n    /// @dev Helper: integer square root (for initial LP minting)\n    function sqrt(uint y) private pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "prague",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode"
        ]
      }
    }
  }
}